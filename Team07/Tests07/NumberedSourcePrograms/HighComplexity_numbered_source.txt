procedure first{
1   m11 = u11 + u11 / x4 * 3 / 5 + (19 - 2 * 22) / 2 + (u18 * (u19 - (19 * (2 + 2 + (2 + 2)))));
2    mu11 = mu11+ 1;
3    mu13 = 3;
4    mu14 = 4;
5    mu15 = mu15;
6    if ((( u12 ==  mu11 ) && (!( 123 == 321 ))) || ( u13 == 1 + 1)) then {
7      call fifth;
8      mu12 = mu12 + 5;
9      while (mu11 + mu12 == mu13 + mu14) {
10        while ((mu13 == 13) || (mu14 == 14)) {
11          m11 = u2 * 2 + 5;
12          while ((mu11 == mu12) || (u13 * u12 == mu13 % 4)) {
13            read m13;
14            print u12;
15            if (mu16 * mu17 * mu18 * mu19 == u16 / u17 / u18 / u19)
              then{
16                 while (u11==u12){
17                    mu11 = u12 + 1;
18                    mu21 = u11 + 1;
                  }
              }
            else {
19             while ((!(6 == 9)) || (4 == 2 + 2)) {
20                mu11 = mu12 * mu13;
21                m11 = u19 + u18;
              }
22              if (72 * 1010101010101 >= u15)
                then{
23                    mu19 = u19 + u18 + u17 / u16;
24                    mu19 = mu19+ 10;
25                    print u19;
26                    read m19;
                }
              else {
27                m17 = u17;
28                m18 = u18;
29                m15 = mu16 + mu17 + mu18 + mu19;
              }
30              print mu11;
31              read m16;
32              read m12;
            }

          }
33          m14 = 4 + 5;
34          m15 = 9 * 4;

        }
35        while (1 == 1) {
36          m11 = u14 + u15;
37          m12 = u13 * u16;
        }
      }
38      mu13 = mu12 + 5 * 2 + (8 - 10);
    }else{
39      mu18 = u14 + u14;
40      mu15 = mu15 + mu18;
41      call second;

    }
42    call fourth;

}

procedure second{

43    m21 = u21 * u22 / u23;
44    read m23;
45    print u24;

46    if (u22 < 19) then {

47      while (!((mu24 == mu24) && ((u25 - u24 != mu23) || (!(u22 < 1))))) {

48        print mu23;
49        read m23;

50        while ((((2 > 1) || (u21 < mu21))
            || (((mu22 > u22) && (mu21 < u23)) && ((mu21) != (18 * (69) - (u24) / 2 + u21 % x2))))
            && ((((x1 > x2) || (u21 < u24))
                || (((u25 > mu25) && (3 < 15)) && ((77) != (u21 * (u22) - (u23) / 2 + u24 % x6))))
                || (((mu21 > mu22) || (mu23 < mu24))
                    || (((mu21 > 22) && (3 < 5)) && ((8) != (8 * (8) - (16) / 2 + 16 % 2)))))) {

51          while (2 == 2 + 2 - 2 * 2 / 2 % 2 + 22) {

52            m22 = u22 - 18 / 2 * 18;
53            m23 = 2;
54            m24 = 6;
55            m25 = u25;

          }

56          while (1 < 2) {

57            mu21 = 21;
58            mu22 = 22;
59            mu23 = 23;

60            while (2 > 1) {

61              mu24 = u24;
62              mu25 = mu25 + 1;
            }

63            m21 = u25 + u22 * x2 + (mu21 / 7);

          }
        }

      }

    } else {

64      while (!((u26 == u27) && ((u28 - u29 != mu23) || (!(u22 < 1))))) {

65        print mu23;
66        read m23;

67        while ((((2 > 1) || (u21 < mu21))
            || (((mu22 > u22) && (mu21 < u23)) && ((mu21) != (18 * (69) - (u24) / 2 + u21 % x2))))
            && ((((x1 > x2) || (u21 < u24))
                || (((u25 > mu25) && (3 < 15)) && ((77) != (u21 * (u22) - (u23) / 2 + u24 % x6))))
                || (((mu21 > mu22) || (mu23 < mu24))
                    || (((mu21 > 22) && (3 < 5)) && ((8) != (8 * (8) - (16) / 2 + 16 % 2)))))) {

68          while (2 == 2 + 2 - 2 * 2 / 2 % 2 + 22) {

69            m22 = u22 - 18 / 2 * 18;
70            m23 = 2;
71            m24 = 6;
72            m25 = u25;

          }

73          while (1 < 2) {

74            mu21 = 21;
75            mu22 = 22;
76            mu23 = 23;

77            while (2 > 1) {

78              mu24 = u24;
79              mu25 = mu25 + 1;
            }

80            m21 = u26 + u22 * x2 + (mu21 / 7);

          }
        }
      }
    }

81    m22 = u21 / x1 * 3 / 5 + (18 - 2 * 22) / 2 + (u28 * (u29 - (18 * (2 + 2 + (2 + 2)))));
82    print u23;
83    print mu22;
84    call third;

}

procedure third{
85    if ((u31 == u32) || (u41 == u42))
    then{
86      m31 = u31;
87      m32 = u32;
88      m33 = u33;
89      m34 = u34;
90      m35 = u35;
    }
    else {
91      m36 = u36;
92      m37 = u37;
93      m38 = u38;
94      m39 = u39;
95      while ((mu31 == mu32) && (!(mu32 == mu31))) {
96        mu33 = mu34;
97        mu34 = mu33;
      }
98      mu35 = mu36;
99      mu36 = mu35;
100      mu31 = mu32;
101      mu32 = mu31;
    }
102    mu37 = mu37;
103    mu38 = mu38;
104    mu39 = (((((((u31 + u32) + u33) + u34) - u35) - u36) - u37) - u38) * mu39;

105    if ((u31 == u32) || (u41 == u42))
    then{
106      m31 = u31;
107      m32 = u32;
108      m33 = u33;
109      m34 = u34;
110      m35 = u35;
    }
    else {
111      m36 = u36;
112      m37 = u37;
113      m38 = u38;
114      m39 = u39;
115      while ((mu31 == mu32) && (!(mu32 == mu31))) {
116        mu33 = mu34;
117        mu34 = mu33;
      }
118      mu35 = mu36;
119      mu36 = mu35;
120      mu31 = mu32;
121      mu32 = mu31;
    }
122    mu37 = mu37;
123    mu38 = mu38;
124    mu39 = (((((((u31 + u32) + u33) + u34) - u35) - u36) - u37) - u38) * mu39;
}

procedure fourth{
125    if( (u41==u42) && (u43==u44) ) then {
126        mu41 = mu41;
127        mu42 = mu42;
128        mu43= mu43;
129        mu44 = mu44;
130        if( (u41==u43) || (u44==u46) ) then {
131            mu47 = mu48;
        }else{
132            m41 = u41;
        }
    }else{
133        mu43= mu44;
134        mu44 = mu43;
    }
135    m48 = m49;
136    if( (u41==u42) && (u43==u44) ) then {
137        mu41 = mu41;
138        mu42 = mu42;
139        mu43= mu43;
140        mu44 = mu44;
141        while( (u41==u43) || (u44==u46) )  {
142            mu47 = mu48;
        }
    }else{
143        mu43= mu44;
144        mu44 = mu43;
    }
145    if( (u41==u42) && (u43==u44) ) then {
146        mu41 = mu41;
147        while( (u41==u43) || (u44==u46) )  {
148            mu47 = mu48;
        }
149        mu49 = mu49;
    }else{
150        mu43= mu44;
151        mu44 = mu43;
152        while( (u41==u43) || (u44==u46) )  {
153            mu47 = mu48;
        }
    }
}

procedure fifth{
154    m51 = (u51*u52)*(u53-u54);
155    m52 = (u55)*((u56));
156    m53 = ((u57+u58)*(u57-u58))/u59;
157    m54 = u54/u55/u56 + u51*u52*u53;
158    m55 = (mu51%mu52)/(1 % 100001);

159    while(1==1){
160         m56 = (u55)*((u56))%(u51*u52)*(u53-u54);
161         m57 = ((u57+u58)*(u57-u58))/u59+(u55)*((u56));
162         m58 = u54/u55/u56 + u51*u52*u53/((u57+u58)*(u57-u58))/u59;
163         mu51 = u54/u55/u56 + u51*u52*u53 - (mu51%mu52)/(1 % 100001);
164         mu52 = (mu51%mu52)/(1 % 100001);
    }
165    m59 = (1+2)*3 +(4+5)*6 + (7+8)*9;

166    if( !((u55)*((u56))%(u51*u52)*(u53-u54)== ((u57+u58)*(u57-u58))/u59+(u55)*((u56))) ) then{
167        m51 = u51;
168        mu56=mu56;
    }else{
169        m52 = u52;
170        mu55 = mu54;
    }

171    while( u54/u55/u56 + u51*u52*u53 - (mu51%mu52)/(1 % 100001) > u54/u55/u56 + u51*u52*u53/((u57+u58)*(u57-u58))/u59 ){
172        mu53 = mu53;
173        mu54 = mu55;
    }
174    read mu58;
175    print mu59;
}




procedure sixth{
176    while(u61 == u62){
177        if(u63==u64) then{
178            mu61 = mu61;
179            mu63 = mu64;
        }
        else{
180            mu62 = mu62;
181            mu64 = mu63;
        }
182        m61 = u62;
    }
183    while(u61 == u62){
184        if(u63==u64) then{
185            mu61 = mu61;
186            mu63 = mu64;
        }
        else{
187            mu62 = mu62;
188            mu64 = mu63;
        }
    }
189    while(u61 == u62){
190        while(u63==u64){
191            mu61 = mu61;
192            mu63 = mu64;
193            mu62 = mu62;
194            mu64 = mu63;
        }
    }
195    while(u61 == u62){
196        while(u63==u64){
197            mu61 = mu61;
198            mu63 = mu64;
199            mu62 = mu62;
200            mu64 = mu63;
        }
201        m63 = u63;
    }
}
